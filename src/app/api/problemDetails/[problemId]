import { NextResponse } from 'next/server';
import { MongoClient, ObjectId } from 'mongodb';

export async function GET(request: Request, { params }: { params: { problemId: string } }) {
  const { problemId } = params;
  console.log('[API Detail] Received request for problemId:', problemId); // Log incoming ID

  if (!problemId || !ObjectId.isValid(problemId)) {
    console.error('[API Detail] Invalid Problem ID:', problemId);
    return NextResponse.json({ error: 'Valid Problem ID is required' }, { status: 400 });
  }

  const uri = process.env.MONGODB_URI;
  if (!uri) {
    console.error('[API Detail] MONGODB_URI is not defined');
    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });
  }

  const client = new MongoClient(uri);
  try {
    await client.connect();
    console.log('[API Detail] Connected to MongoDB');
    const database = client.db('plantdb');
    const collection = database.collection('problemDetails');

    const detailDocument = await collection.findOne({ problemId: new ObjectId(problemId) });
    console.log('[API Detail] Document found in MongoDB:', JSON.stringify(detailDocument, null, 2)); // <<< IMPORTANT LOG

    if (!detailDocument) {
      console.warn('[API Detail] Problem details not found in DB for problemId:', problemId);
      return NextResponse.json({ error: 'Problem details not found' }, { status: 404 });
    }

    // Explicitly check for the fields before sending
    if (!detailDocument.fullDescription) {
        console.warn('[API Detail] fullDescription is missing or empty in the fetched MongoDB document.');
    }
    if (!detailDocument.SignOfDamage) {
        console.warn('[API Detail] SignOfDamage is missing or empty in the fetched MongoDB document.');
    }

    const formattedDetail = {
      _id: detailDocument._id.toString(),
      problemId: detailDocument.problemId.toString(),
      scientificName: detailDocument.scientificName,
      fullDescription: detailDocument.fullDescription, // Directly assign
      SignOfDamage: detailDocument.SignOfDamage,       // Directly assign
      images: detailDocument.images,
      // If there are other fields, ensure they are included or explicitly assigned
      // ... other fields from detailDocument
    };
    console.log('[API Detail] Sending formatted detail to client:', JSON.stringify(formattedDetail, null, 2)); // <<< IMPORTANT LOG

    return NextResponse.json(formattedDetail);
  } catch (error) {
    console.error('[API Detail] Error fetching problem details:', error);
    return NextResponse.json({ error: 'Failed to fetch problem details' }, { status: 500 });
  } finally {
    await client.close();
    console.log('[API Detail] MongoDB connection closed');
  }
}